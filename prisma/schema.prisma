// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id          Int       @id @default(autoincrement())
  dateOfBirth DateTime?
  mobile      String?
  gender      String?
  addressId   Int?
  address     Address[]
  user        User      @relation(fields: [userId], references: [id])
  userId      Int       @unique
}

model User {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())
  emailVerifiedAt DateTime?

  email    String?  @unique
  username String?  @unique
  lname    String?
  fname    String?
  password String?
  profile  Profile?

  // values: google, facebook
  provider     String?
  // google id, or facebook id here
  providerId   String?
  rewardPoints Int?    @default(0)

  role               String?             @default("customer")
  orders             Order[]
  products           Product[]
  carts              cart[]
  shops              Shop[]
  categorys          Category[]
  shopId             Int?
  deliveryBoy        DeliveryBoy?        @relation(fields: [deliveryBoyId], references: [id])
  deliveryBoyId      Int?                @unique
  wallet             Wallet              @relation(fields: [walletId], references: [id])
  walletId           Int                 @unique
  notifications      Notification[]
  notificationTokens NotificationToken[]
  coupons            Coupon[]
}

model DeliveryBoy {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name           String?
  email          String?
  mobile         String?
  status         String?   @default("active") // active, inactive, suspended
  suspendReason  String?
  suspendDate    DateTime?
  depitThreshold Decimal?
  user           User?
  userId         Int?      @unique
}

model Wallet {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  amount            Decimal             @default(0)
  user              User?
  WalletTransaction WalletTransaction[]
}

model WalletTransaction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  amount   Decimal?
  wallet   Wallet?  @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId Int?
}

// table ucode for password recovery
model Ucode {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  email       String
  dateExpired DateTime?
}

model City {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  deleviryFee  Decimal?
  deleviryTime Int?
  provinceId   Int?
  province     Province? @relation(fields: [provinceId], references: [id])
  Address      Address[]
}

model Province {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  deleviryFee  Decimal
  deleviryTime Int
  Address      Address[]
  City         City[]
}

model Address {
  id          Int           @id @default(autoincrement())
  street      String?
  cityId      Int?
  city        City?         @relation(fields: [cityId], references: [id])
  provinceId  Int
  province    Province      @relation(fields: [provinceId], references: [id])
  Order       Order[]
  latitude    Float?
  longitude   Float?
  buildingNo  String?
  floorNo     String?
  apartmentNo String?
  ShopDetails ShopDetails[]
  Profile     Profile[]
}

model Category {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
  parentId     Int?
  categoryLink String?
  sortOrder    Int?
  author       User?     @relation(fields: [authorId], references: [id])
  authorId     Int?
  published    Boolean   @default(false)
  name         String    @db.VarChar(255)
  slug         String    @db.VarChar(255)
  products     Product[]
}

model Tag {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  title     String    @unique
  slug      String    @unique
  products  Product[]
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // optionSet   OptionSet? @relation(fields: [optionSetId], references: [id])
  // optionSetId Int?

  name String  @db.VarChar(255)
  slug String? @db.VarChar(255)

  // SEO
  metaTitle       String? @db.Text
  metaDescription String? @db.Text // max limit 320
  metaKeyword     String? @db.Text

  defaultVariant           Int?       @default(0)
  isSale                   Boolean?   @default(false)
  price                    Decimal
  quantity                 Int?
  isWholeSale              Boolean?   @default(false)
  trackQuantity            Boolean?   @default(true)
  allowOutOfStockPurchases Boolean?   @default(false)
  brand                    String?    @db.VarChar(255)
  description              String?    @db.Text
  published                Boolean    @default(true)
  author                   User       @relation(fields: [authorId], references: [id])
  authorId                 Int
  shopId                   Int?
  shop                     Shop?      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  availableFrom            DateTime?
  availableTo              DateTime?
  isFeatured               Boolean?   @default(false)
  isBestSeller             Boolean?   @default(false)
  isTopRated               Boolean?   @default(false)
  isSpecialOffer           Boolean?   @default(false)
  isAvliable               Boolean?   @default(true)
  categories               Category[]

  keywords        String?
  orderItems      OrderItem[]
  productImages   ProductImage[]
  carts           cart[]
  subOrderItems   SubOrderItem[]
  tags            Tag[]
  productVariants ProductVariant[]
  inventoryLogs   InventoryLog[]
  wholesalePrices wholesalePrice[]
}

model wholesalePrice {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  productId Int?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  price     Decimal?
  quantity  Int?
}

model InventoryLog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  productId        Int?
  product          Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productvariantId Int?
  productvariant   ProductVariant? @relation(fields: [productvariantId], references: [id], onDelete: Cascade)

  quantity Int?
  status   String? // 
}

model ProductVariant {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  productId Int?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  price               Decimal?
  discount            Decimal?
  quantity            Int?
  sku                 Int?
  barcode             String?
  status              Int?                  @default(0)
  sortOrder           Int?                  @default(0)
  ProductVariantImage ProductVariantImage[]
  inventoryLogs       InventoryLog[]
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  orginal   String?
  thumbnail String?
  medium    String?
  large     String?

  altText   String?
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  status    Int?    @default(0)
  sortOrder Int?    @default(0)
}

model ProductVariantImage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  orginal          String?
  thumbnail        String?
  medium           String?
  large            String?
  altText          String?
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  productVariantId Int
  status           Int?           @default(0)
  sortOrder        Int?           @default(0)
}

// Custom option set
// model OptionSet {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now())

//   shopId Int?
//   shop   Shop? @relation(fields: [shopId], references: [id], onDelete: Cascade)

//   name             String?            @db.VarChar(255)
//   description      String?            @db.Text
//   status           Int?               @default(0)
//   sortOrder        Int?               @default(0)
//   OptionSetElement OptionSetElement[]
//   Product          Product[]
// }

// Custom option set item
// model OptionSetElement {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now())

//   optionSetId Int?
//   optionSet   OptionSet? @relation(fields: [optionSetId], references: [id], onDelete: Cascade)

//   // available values:
//   // text, select, textarea
//   type        String? @db.VarChar(255)
//   // ----general----
//   label       String? @db.VarChar(255)
//   name        String? @db.VarChar(255)
//   required    Int?    @default(0)
//   style       String? @db.Text // custom inline css
//   placeholder String? @db.Text
//   helpText    String? @db.Text
//   limit       Int?
//   // ----condition----
//   // if condition fullfilled then this element will be show up
//   // condition format: {action: show/hide, match: all/any,
//   // condition:[{element_name:name, condition:condition, value:value}]}
//   isCondition Int?    @default(0)
//   condition   String? @db.Text
//   // ----select type----
//   optionValue String? @db.Text // option format: [{price:price,value:value,text:text}]

//   status    Int? @default(0)
//   sortOrder Int? @default(0)
// }

// User can create own shop to selling products
model Shop {
  id              Int         @id @default(autoincrement())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now())
  mangers         User[]
  shopType        String?     @default("retaile") // available value: retaile, wholesale, restaurant, small_business
  openTime        String?     @default("00:00")
  closeTime       String?     @default("23:59")
  daysOff         String[]    @default([]) // available value: sunday, monday, tuesday, wednesday, thursday, friday, saturday
  isBusy          Boolean?    @default(false)
  pendingOrderLmt Int?        @default(100)
  canPreOrder     Boolean?    @default(false)
  // available value:
  // 1: pending
  // 2: approved
  // 3: banned
  // 4: disabled
  status          String?     @default("pending")
  // available value:
  // 1: active
  // 2: deactive
  sellerStatus    String?     @default("active")
  shopDetails     ShopDetails @relation(fields: [shopDetailsId], references: [id])
  shopDetailsId   Int         @unique
  products        Product[]
}

// contains shop details
model ShopDetails {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  displayName String?
  name        String?
  phone       String?
  email       String?
  description String? @db.Text
  logo        String?
  shopId      Int?    @unique
  latitute    Float?
  longitute   Float?

  addressId Int
  address   Address? @relation(fields: [addressId], references: [id], onDelete: Cascade)
  Shop      Shop?
}

// user order details
model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  orderId      String  @unique
  orderItemId  String
  price        Decimal
  delivery_fee String?
  discount     String?
  total        String

  // /**
  // * available value:
  // * COD, ONLINE_PAYMENT
  // */
  paymentMode   String
  // /**
  // * available value:
  // * NOT_PAID, PAID
  // */
  paymentStatus String

  // /**
  // * available value:
  // *
  // * 'order_placed',
  // * 'order_confirmed',
  // * 'order_picked',
  // * 'order_on_way',
  // * 'order_delivered',
  // * 'order_returned',
  // * 'order_cancelled',
  // * 'order_paused'
  // */
  status    String?
  comment   String?  @db.Text
  addressId Int?
  address   Address? @relation(fields: [addressId], references: [id])

  user             User?           @relation(fields: [userId], references: [id])
  userId           Int?
  OrderItem        OrderItem[]
  PaymentDetails   PaymentDetails? @relation(fields: [paymentDetailsId], references: [id])
  paymentDetailsId Int?
}

// Order item
model OrderItem {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  quantity    Int
  price       Decimal
  orderItemId String
  product     Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int
  order       Order?   @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  orderId     String
  shopOrderId Int?
}

// suborder item for seller order
model SubOrderItem {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  quantity   Int
  price      Decimal
  subOrderId Int?
  product    Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
}

// payment details attach with order details
model PaymentDetails {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  orderId   Int
  amount    Int
  provider  String?
  status    String?
  Order     Order[]
}

model cart {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  quantity  Int
  product   Product? @relation(fields: [productId], references: [id])
  productId Int
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int
}

model ApiKey {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  key       String   @unique
}

model SystemConfig {
  id                 Int             @id @default(autoincrement())
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @default(now())
  startHour          String
  endHour            String
  pricePerKm         Float
  minOrderAmount     Float
  forceClose         Boolean         @default(false)
  allowGuestCheckout Boolean         @default(false)
  appConfig          MobileAppConfig @relation(fields: [mobileAppConfigId], references: [id])

  forceCloseMessage String

  mobileAppConfigId Int
}

model Notification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  title     String
  body      String
  type      String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  isRead    Boolean  @default(false)
  isDeleted Boolean  @default(false)
}

model NotificationToken {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  token     String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model MobileAppConfig {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  retailLayout    Json     @default("{}")
  resturantLayout Json     @default("{}")
  appConfig       Json     @default("{}")

  appVersion String

  SystemConfig SystemConfig[]
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  action    String
  entity    String
  entityId  Int
  query     String
  userId    Int
}

model Coupon {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
  code           String    @unique
  type           String // percentage, fixed
  isReferral     Boolean   @default(false)
  referrer       User?     @relation(fields: [referrerId], references: [id])
  referrerId     Int?
  value          Float?
  maxDiscount    Float?
  minOrderAmount Float?
  maxUsage       Int?
  usageCount     Int?
  applyFor       String? // all, category, product, shop
  categoryId     Int?
  productId      Int?
  shopId         Int?
  startDate      DateTime?
  endDate        DateTime?

  isActive  Boolean @default(true)
  isDeleted Boolean @default(false)
}
